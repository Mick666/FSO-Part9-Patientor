{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","state/reducer.ts","components/EntryForms/AddHealthCheckEntry.tsx","components/EntryForms/AddHospitalEntry.tsx","components/EntryForms/AddOccupationalHealthEntry.tsx","components/PatientInfo.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","apiBaseUrl","initialState","patients","patientInfo","diagnoses","StateContext","createContext","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","style","color","NumberField","min","max","type","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","dispatch","React","useState","setModalOpen","setError","closeModal","undefined","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","id","Cell","to","a","async","axios","post","newPatient","payload","console","response","AddHealthCheckEntry","date","description","specialist","diagnosisCodes","healthCheckRating","Healthy","AddHealthCheckModal","AddHospitalEntry","discharge","criteria","AddHospitalEntryModal","AddOccupationalHealthEntry","employerName","sickLeave","startDate","endDate","entryData","newEntryValues","AddOccupationalHealthEntryModal","getGenderIcon","patientGender","getHeartColor","HospitalEntryTable","entry","display","paddingRight","Icon","size","index","HealthCheckTable","OccupationalHealthcareTable","EntryDetails","Error","JSON","stringify","assertNever","PatientInfo","useParams","modalHospitalEntry","setModalHospitalOpen","modalOccHealthEntry","setModalOccHealthOpen","openModal","modalFunc","closeModals","submitNewEntry","every","x","newEntry","updatedPatient","entries","push","get","detailedPatientInfo","fetchPatientInfo","App","useEffect","patientListFromApi","fetchPatientList","diagnosesData","log","fetchDiagnoses","Link","primary","Divider","hidden","path","ReactDOM","render","reducer","children","useReducer","state","Provider","action","reduce","memo","document","getElementById"],"mappings":"yJAMYA,EAkDAC,E,wICxDCC,EAAa,4B,gBCWpBC,EAAsB,CAC1BC,SAAU,GACVC,YAAa,GACbC,UAAW,IAGAC,EAAeC,wBAA+C,CACzEL,EACA,kBAAMA,KAmBKM,EAAgB,kBAAMC,qBAAWH,I,8DCpBjCI,EAA0C,SAAC,GAAD,IACrDC,EADqD,EACrDA,KACAC,EAFqD,EAErDA,MACAC,EAHqD,EAGrDA,QAHqD,OAKrD,kBAACC,EAAA,EAAKC,MAAN,KACE,+BAAQH,GACR,kBAAC,IAAD,CAAOI,GAAG,SAASL,KAAMA,EAAMM,UAAU,eACtCJ,EAAQK,KAAI,SAAAC,GAAM,OACjB,4BAAQC,IAAKD,EAAOE,MAAOA,MAAOF,EAAOE,OACtCF,EAAOP,OAASO,EAAOE,aAYrBC,EAAiC,SAAC,GAAD,IAC5CC,EAD4C,EAC5CA,MACAX,EAF4C,EAE5CA,MACAY,EAH4C,EAG5CA,YAH4C,OAK5C,kBAACV,EAAA,EAAKC,MAAN,KACE,+BAAQH,GACR,kBAAC,IAAD,eAAOY,YAAaA,GAAiBD,IACrC,yBAAKE,MAAO,CAAEC,MAAM,QAClB,kBAAC,IAAD,CAAcf,KAAMY,EAAMZ,UAenBgB,EAAqC,SAAC,GAAD,IAAGJ,EAAH,EAAGA,MAAOX,EAAV,EAAUA,MAAOgB,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,IAAtB,OAChD,kBAACf,EAAA,EAAKC,MAAN,KACE,+BAAQH,GACR,kBAAC,IAAD,iBAAWW,EAAX,CAAkBO,KAAK,SAASF,IAAKA,EAAKC,IAAKA,KAE/C,yBAAKJ,MAAO,CAAEC,MAAM,QAClB,kBAAC,IAAD,CAAcf,KAAMY,EAAMZ,UAKnBoB,EAAqB,SAAC,GAQ5B,IAPL1B,EAOI,EAPJA,UACA2B,EAMI,EANJA,cACAC,EAKI,EALJA,gBAMMV,EAAQ,iBASRW,EAAe7B,EAAUa,KAAI,SAAAiB,GAAS,MAAK,CAC/Cf,IAAKe,EAAUC,KACfC,KAAK,GAAD,OAAKF,EAAUxB,KAAf,aAAwBwB,EAAUC,KAAlC,KACJf,MAAOc,EAAUC,SAGnB,OACE,kBAACtB,EAAA,EAAKC,MAAN,KACE,4CACA,kBAACuB,EAAA,EAAD,CACEC,OAAK,EACLC,UAAQ,EACRC,QAAM,EACNC,WAAS,EACT7B,QAASqB,EACTS,SAvBW,SACfC,EACAC,GAEAZ,EAAgBV,GAAO,GACvBS,EAAcT,EAAOsB,EAAKxB,UAoBxB,kBAAC,IAAD,CAAcV,KAAMY,O,SHxGdxB,K,YAAAA,E,gBAAAA,E,eAAAA,M,cAkDAC,O,qBAAAA,I,qBAAAA,I,uBAAAA,I,gCAAAA,M,KItCZ,IAAM8C,EAAgC,CACpC,CAAEzB,MAAOtB,EAAOgD,KAAMnC,MAAO,QAC7B,CAAES,MAAOtB,EAAOiD,OAAQpC,MAAO,UAC/B,CAAES,MAAOtB,EAAOkD,MAAOrC,MAAO,UAwFjBsC,EArFgC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC1D,OACE,kBAAC,IAAD,CACEC,cAAe,CACb1C,KAAM,GACN2C,IAAK,GACLC,YAAa,GACbC,WAAY,GACZC,OAAQ1D,EAAOkD,OAEjBE,SAAUA,EACVO,SAAU,SAAAC,GACR,IACMC,EAAsC,GAa5C,OAZKD,EAAOhD,OACViD,EAAOjD,KAHa,qBAKjBgD,EAAOL,MACVM,EAAON,IANa,qBAQjBK,EAAOJ,cACVK,EAAOL,YATa,qBAWjBI,EAAOH,aACVI,EAAOJ,WAZa,qBAcfI,KAGR,YAAyB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACX,OACE,kBAAC,IAAD,CAAM7C,UAAU,WACd,kBAAC,IAAD,CACEL,MAAM,OACNY,YAAY,OACZb,KAAK,OACLoD,UAAWzC,IAEb,kBAAC,IAAD,CACEV,MAAM,yBACNY,YAAY,MACZb,KAAK,MACLoD,UAAWzC,IAEb,kBAAC,IAAD,CACEV,MAAM,gBACNY,YAAY,aACZb,KAAK,cACLoD,UAAWzC,IAEb,kBAAC,IAAD,CACEV,MAAM,aACNY,YAAY,aACZb,KAAK,aACLoD,UAAWzC,IAEb,kBAAC,EAAD,CACEV,MAAM,SACND,KAAK,SACLE,QAASiC,IAEX,kBAACkB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,GACjC,kBAACC,EAAA,EAAD,CAAQtC,KAAK,SAASuC,QAASjB,EAAU1B,MAAM,OAA/C,WAIF,kBAACsC,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAClC,kBAACC,EAAA,EAAD,CACEtC,KAAK,SACLoC,QAAQ,QACRxC,MAAM,QACN4C,UAAWR,IAAUD,GAJvB,cCvEDU,EAVS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,QAAStB,EAAvB,EAAuBA,SAAUuB,EAAjC,EAAiCA,MAAjC,OACtB,kBAACC,EAAA,EAAD,CAAOC,KAAMJ,EAAWC,QAASA,EAASI,UAAU,EAAOC,WAAS,GAClE,kBAACH,EAAA,EAAMI,OAAP,0BACA,kBAACJ,EAAA,EAAMK,QAAP,KACGN,GAAS,kBAACO,EAAA,EAAD,CAASC,UAAQ,EAACxD,MAAM,OAAxB,iBAAyCgD,IACnD,kBAAC,EAAD,CAAgBvB,SAAUA,EAAUC,SAAUqB,O,SCR9CU,EAAkB,CACtB,gCACA,6CACA,8CACA,yCAYaC,EATS,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SACjC,OACE,yBAAKrE,UAAU,cACZ,kBAACsE,EAAA,EAAD,CAAQC,KAAK,QAAQlB,UAAQ,EAACe,OAAQ,EAAIA,EAAQI,UAAW,IAC7DH,EAAW,2BAAIH,EAAgBE,IAAe,OC2DtCK,EAjEmB,WAAO,IAAD,EACLlF,IADK,mBAC7BL,EAD6B,KAC7BA,SAAYwF,EADiB,OAGJC,IAAMC,UAAkB,GAHpB,mBAG/BrB,EAH+B,KAGpBsB,EAHoB,OAIZF,IAAMC,WAJM,mBAI/BnB,EAJ+B,KAIxBqB,EAJwB,KAQhCC,EAAa,WACjBF,GAAa,GACbC,OAASE,IAiBX,OACE,yBAAKhF,UAAU,OACb,kBAACiF,EAAA,EAAD,CAAWC,UAAU,UACnB,6CAEF,kBAACC,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAMrB,OAAP,KACE,kBAACqB,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMG,WAAP,aACA,kBAACH,EAAA,EAAMG,WAAP,eACA,kBAACH,EAAA,EAAMG,WAAP,mBACA,kBAACH,EAAA,EAAMG,WAAP,wBAGJ,kBAACH,EAAA,EAAMI,KAAP,KACGC,OAAO9C,OAAOxD,GAAUe,KAAI,SAACwF,GAAD,OAC3B,kBAACN,EAAA,EAAME,IAAP,CAAWlF,IAAKsF,EAAQC,IACtB,kBAACP,EAAA,EAAMQ,KAAP,KAAY,kBAAC,IAAD,CAAMC,GAAE,mBAAcH,EAAQC,KAAOD,EAAQ/F,OACzD,kBAACyF,EAAA,EAAMQ,KAAP,KAAaF,EAAQjD,QACrB,kBAAC2C,EAAA,EAAMQ,KAAP,KAAaF,EAAQlD,YACrB,kBAAC4C,EAAA,EAAMQ,KAAP,KACE,kBAAC,EAAD,CAAiBtB,UAAU,EAAOD,OAAQ,WAMpD,kBAAC,EAAD,CACEb,UAAWA,EACXrB,SA3CmB,SAAOQ,GAAP,iBAAAmD,EAAAC,OAAA,2EAAAD,EAAA,MAEcE,IAAMC,KAAN,UAC9BhH,EAD8B,aAEjC0D,IAJmB,gBAEPuD,EAFO,EAEbrE,KAIR8C,ECuDG,CACL7D,KAAM,cACNqF,QDzDsBD,IACpBlB,IAPqB,gDASrBoB,QAAQ1C,MAAM,KAAE2C,SAASxE,MACzBkD,EAAS,KAAEsB,SAASxE,KAAK6B,OAVJ,yDA4CnBA,MAAOA,EACPD,QAASuB,IAEX,kBAAC5B,EAAA,EAAD,CAAQC,QAAS,kBAtDSyB,GAAa,KAsDvC,qB,QE3DOwB,EAAuC,SAAC,GAA4B,IAA1BnE,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACnD5C,IAAhBH,EADmE,oBACnEA,UAET,OACI,kBAAC,IAAD,CACIgD,cAAe,CACXkE,KAAM,GACNC,YAAa,GACbC,WAAY,GACZC,eAAgB,CAAC,IACjBC,kBAAmB3H,EAAkB4H,QACrC9F,KAAM,eAEVqB,SAAUA,EACVO,SAAU,SAAAC,GACN,IACMC,EAAsC,GAa5C,OAZKD,EAAO4D,OACR3D,EAAO2D,KAHW,qBAKjB5D,EAAO6D,cACR5D,EAAO4D,YANW,qBAQjB7D,EAAO8D,aACR7D,EAAO6D,WATW,qBAWjB9D,EAAO+D,iBACR9D,EAAO8D,eAZW,qBAcf9D,KAGV,YAAyD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,MAAO9B,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBAC/B,OACI,kBAAC,IAAD,CAAMhB,UAAU,WACZ,kBAAC,IAAD,CACIL,MAAM,OACNY,YAAY,OACZb,KAAK,OACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,cACNY,YAAY,cACZb,KAAK,cACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,aACNY,YAAY,aACZb,KAAK,aACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,oBACND,KAAK,oBACLoD,UAAWpC,EACXC,IAAK,EACLC,IAAK,IAET,kBAAC,EAAD,CACAG,cAAeA,EACfC,gBAAiBA,EACjB5B,UAAWoG,OAAO9C,OAAOtD,KAEzB,kBAAC2D,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,GAC/B,kBAACC,EAAA,EAAD,CAAQtC,KAAK,SAASuC,QAASjB,EAAU1B,MAAM,OAA/C,WAIJ,kBAACsC,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAChC,kBAACC,EAAA,EAAD,CACItC,KAAK,SACLoC,QAAQ,QACRxC,MAAM,QACN4C,UAAWR,IAAUD,GAJzB,cAmCjBgE,EAVa,SAAC,GAAD,IAAGrD,EAAH,EAAGA,UAAWC,EAAd,EAAcA,QAAStB,EAAvB,EAAuBA,SAAUuB,EAAjC,EAAiCA,MAAjC,OAC1B,kBAACC,EAAA,EAAD,CAAOC,KAAMJ,EAAWC,QAASA,EAASI,UAAU,EAAOC,WAAS,GAClE,kBAACH,EAAA,EAAMI,OAAP,qCACA,kBAACJ,EAAA,EAAMK,QAAP,KACGN,GAAS,kBAACO,EAAA,EAAD,CAASC,UAAQ,EAACxD,MAAM,OAAxB,iBAAyCgD,IACnD,kBAAC,EAAD,CAAqBvB,SAAUA,EAAUC,SAAUqB,OCtG5CqD,EAAoC,SAAC,GAA4B,IAA1B3E,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EAChD5C,IAAhBH,EADgE,oBAChEA,UAET,OACI,kBAAC,IAAD,CACIgD,cAAe,CACXkE,KAAM,GACNC,YAAa,GACbC,WAAY,GACZC,eAAgB,CAAC,IACjBK,UAAW,CAAER,KAAM,GAAIS,SAAU,IACjClG,KAAM,YAEVqB,SAAUA,EACVO,SAAU,SAAAC,GACN,IACMC,EAAsC,GAgB5C,OAfKD,EAAO4D,OACR3D,EAAO2D,KAHW,qBAKjB5D,EAAO6D,cACR5D,EAAO4D,YANW,qBAQjB7D,EAAO8D,aACR7D,EAAO6D,WATW,qBAWjB9D,EAAO+D,iBACR9D,EAAO8D,eAZW,qBAcjB/D,EAAOoE,UAAUR,MAAS5D,EAAOoE,UAAUC,WAC5CpE,EAAOmE,UAfW,qBAiBfnE,KAGV,YAAyD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,MAAO9B,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBAC/B,OACI,kBAAC,IAAD,CAAMhB,UAAU,WACZ,kBAAC,IAAD,CACIL,MAAM,OACNY,YAAY,OACZb,KAAK,OACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,cACNY,YAAY,cACZb,KAAK,cACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,aACNY,YAAY,aACZb,KAAK,aACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,iBACNY,YAAY,iBACZb,KAAK,iBACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,qBACNY,YAAY,qBACZb,KAAK,qBACLoD,UAAWzC,IAEf,kBAAC,EAAD,CACIU,cAAeA,EACfC,gBAAiBA,EACjB5B,UAAWoG,OAAO9C,OAAOtD,KAE7B,kBAAC2D,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,GAC/B,kBAACC,EAAA,EAAD,CAAQtC,KAAK,SAASuC,QAASjB,EAAU1B,MAAM,OAA/C,WAIJ,kBAACsC,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAChC,kBAACC,EAAA,EAAD,CACItC,KAAK,SACLoC,QAAQ,QACRxC,MAAM,QACN4C,UAAWR,IAAUD,GAJzB,cAmCjBoE,EAVe,SAAC,GAAD,IAAGzD,EAAH,EAAGA,UAAWC,EAAd,EAAcA,QAAStB,EAAvB,EAAuBA,SAAUuB,EAAjC,EAAiCA,MAAjC,OAC1B,kBAACC,EAAA,EAAD,CAAOC,KAAMJ,EAAWC,QAASA,EAASI,UAAU,EAAOC,WAAS,GAChE,kBAACH,EAAA,EAAMI,OAAP,iCACA,kBAACJ,EAAA,EAAMK,QAAP,KACKN,GAAS,kBAACO,EAAA,EAAD,CAASC,UAAQ,EAACxD,MAAM,OAAxB,iBAAyCgD,IACnD,kBAAC,EAAD,CAAkBvB,SAAUA,EAAUC,SAAUqB,OC9G/CyD,EAA8C,SAAC,GAA4B,IAA1B/E,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EAC1D5C,IAAhBH,EAD0E,oBAC1EA,UAQT,OACI,kBAAC,IAAD,CACIgD,cAAe,CACXkE,KAAM,GACNC,YAAa,GACbC,WAAY,GACZC,eAAgB,CAAC,IACjBS,aAAc,GACdC,UAAW,CAAEC,UAAW,GAAIC,QAAS,IACrCxG,KAAM,0BAEVqB,SAjBW,SAACoF,GAAsD,IAAD,IAC/DC,EAAiBD,EACqB,MAAxC,UAAAC,EAAeJ,iBAAf,eAA0BC,YAA2D,MAAtC,UAAAG,EAAeJ,iBAAf,eAA0BE,iBAAuBE,EAAeJ,UACnHjF,EAASqF,IAeL9E,SAAU,SAAAC,GAAW,IAAD,QAEVC,EAAsC,GAgB5C,OAfKD,EAAO4D,OACR3D,EAAO2D,KAHW,qBAKjB5D,EAAO6D,cACR5D,EAAO4D,YANW,qBAQjB7D,EAAO8D,aACR7D,EAAO6D,WATW,qBAWjB9D,EAAO+D,iBACR9D,EAAO8D,eAZW,wBAcjB,OAAC/D,QAAD,IAACA,OAAD,YAACA,EAAQyE,iBAAT,aAAC,EAAmBC,aAApB,OAAiC1E,QAAjC,IAAiCA,OAAjC,YAAiCA,EAAQyE,iBAAzC,aAAiC,EAAmBE,WAAmB,OAAN3E,QAAM,IAANA,OAAA,YAAAA,EAAQyE,iBAAR,eAAmBC,cAAa,OAAC1E,QAAD,IAACA,OAAD,YAACA,EAAQyE,iBAAT,aAAC,EAAmBE,YACtH1E,EAAOwE,UAfW,qBAiBfxE,KAGV,YAAyD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,MAAO9B,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBAC/B,OACI,kBAAC,IAAD,CAAMhB,UAAU,WACZ,kBAAC,IAAD,CACIL,MAAM,OACNY,YAAY,OACZb,KAAK,OACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,cACNY,YAAY,cACZb,KAAK,cACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,aACNY,YAAY,aACZb,KAAK,aACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,gBACNY,YAAY,gBACZb,KAAK,eACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,wBACNY,YAAY,wBACZb,KAAK,sBACLoD,UAAWzC,IAEf,kBAAC,IAAD,CACIV,MAAM,sBACNY,YAAY,sBACZb,KAAK,oBACLoD,UAAWzC,IAEf,kBAAC,EAAD,CACIU,cAAeA,EACfC,gBAAiBA,EACjB5B,UAAWoG,OAAO9C,OAAOtD,KAE7B,kBAAC2D,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,GAC/B,kBAACC,EAAA,EAAD,CAAQtC,KAAK,SAASuC,QAASjB,EAAU1B,MAAM,OAA/C,WAIJ,kBAACsC,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAChC,kBAACC,EAAA,EAAD,CACItC,KAAK,SACLoC,QAAQ,QACRxC,MAAM,QACN4C,UAAWR,IAAUD,GAJzB,cAmCjB4E,EAVyB,SAAC,GAAD,IAAGjE,EAAH,EAAGA,UAAWC,EAAd,EAAcA,QAAStB,EAAvB,EAAuBA,SAAUuB,EAAjC,EAAiCA,MAAjC,OACpC,kBAACC,EAAA,EAAD,CAAOC,KAAMJ,EAAWC,QAASA,EAASI,UAAU,EAAOC,WAAS,GAChE,kBAACH,EAAA,EAAMI,OAAP,iCACA,kBAACJ,EAAA,EAAMK,QAAP,KACKN,GAAS,kBAACO,EAAA,EAAD,CAASC,UAAQ,EAACxD,MAAM,OAAxB,iBAAyCgD,IACnD,kBAAC,EAAD,CAA4BvB,SAAUA,EAAUC,SAAUqB,OCzHhEiE,EAAgB,SAACC,GACrB,OAAQA,GACN,IAAK,OACH,MAAO,OACT,IAAK,SACH,MAAO,QACT,IAAK,QACH,MAAO,aACT,QACE,SAIAC,EAAgB,SAACvD,GACrB,OAAQA,GACN,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,MACT,QACE,SAIAwD,EAAyD,SAAC,GAAe,IAAD,EAAZC,EAAY,EAAZA,MAAY,EACnDtI,IAAhBH,EADmE,oBACnEA,UACT,OACE,kBAAC4E,EAAA,EAAD,KACE,yBAAKxD,MAAO,CAAEsH,QAAS,SAAU,wBAAItH,MAAO,CAAEuH,aAAc,QAAUF,EAAMvB,MAA5E,IAAuF,kBAAC0B,EAAA,EAAD,CAAMtI,KAAK,SAASuI,KAAK,WADlH,WAEWJ,EAAMrB,WAFjB,IAE6B,6BAC3B,2BAAIqB,EAAMtB,aAHZ,IAG6B,6BAC3B,iDAAmBsB,EAAMf,UAAUR,KAAnC,aAA4CuB,EAAMf,UAAUC,WAJ9D,IAI8E,6BAC5E,sCACGc,EAAMpB,sBADT,aACG,EAAsBxG,KAAI,SAACkB,EAAM+G,GAChC,OAAK9I,EAAU+B,GAEb,wBAAIhB,IAAK+H,GAAQ/G,EAAjB,IAAwB/B,EAAU+B,GAAMzB,MAFb,iDAUjCyI,GAA0D,SAAC,GAAe,IAAbN,EAAY,EAAZA,MACjE,OACE,kBAAC7D,EAAA,EAAD,KACE,yBAAKxD,MAAO,CAAEsH,QAAS,SAAU,wBAAItH,MAAO,CAAEuH,aAAc,QAAUF,EAAMvB,MAA5E,IAAuF,kBAAC0B,EAAA,EAAD,CAAMtI,KAAK,cAAcuI,KAAK,WADvH,WAEWJ,EAAMrB,WAFjB,IAE6B,6BAC3B,2BAAIqB,EAAMtB,aAHZ,IAG6B,6BAC3B,kBAACyB,EAAA,EAAD,CAAMtI,KAAK,QAAQe,MAAOkH,EAAcE,EAAMnB,uBAM9C0B,GAAgF,SAAC,GAAe,IAAD,IAAZP,EAAY,EAAZA,MACvF,OACE,kBAAC7D,EAAA,EAAD,KACE,yBAAKxD,MAAO,CAAEsH,QAAS,SAAU,wBAAItH,MAAO,CAAEuH,aAAc,QAAUF,EAAMvB,MAA5E,IAAuF,kBAAC0B,EAAA,EAAD,CAAMtI,KAAK,WAAWuI,KAAK,WADpH,WAEWJ,EAAMrB,WAFjB,IAE6B,6BAF7B,aAGaqB,EAAMX,aAHnB,IAGiC,6BAC/B,2BAAIW,EAAMtB,aAJZ,IAI6B,6BAC1BsB,EAAMV,UAAN,gCAAiCU,EAAMV,iBAAvC,aAAiC,EAAiBC,UAAlD,sBAA+DS,EAAMV,iBAArE,aAA+D,EAAiBE,SAAY,OAW7FgB,GAAe,SAACR,GACpB,OAAQA,EAAMhH,MACZ,IAAK,WACH,OAAO,kBAAC,EAAD,CAAoBgH,MAAOA,IACpC,IAAK,cACH,OAAO,kBAAC,GAAD,CAAkBA,MAAOA,IAClC,IAAK,yBACH,OAAO,kBAAC,GAAD,CAA6BA,MAAOA,IAC7C,QACE,OAfc,SAACzH,GACnB,MAAM,IAAIkI,MAAJ,0BACeC,KAAKC,UAAUpI,KAazBqI,CAAYZ,KAgGVa,GA5Fe,WAAO,IAAD,EACEnJ,IADF,mBACzBJ,EADyB,KACzBA,YAAeuF,EADU,KAE1BgB,EAAOiD,cAAPjD,GAF0B,EAIAf,IAAMC,UAAkB,GAJxB,mBAI3BrB,EAJ2B,KAIhBsB,EAJgB,OAKiBF,IAAMC,UAAkB,GALzC,mBAK3BgE,EAL2B,KAKPC,EALO,OAMmBlE,IAAMC,UAAkB,GAN3C,mBAM3BkE,EAN2B,KAMNC,EANM,OAORpE,IAAMC,WAPE,mBAO3BnB,EAP2B,KAOpBqB,EAPoB,KAS5BkE,EAAY,SAACC,GAAD,OAA+BA,GAAU,IAErDC,EAAc,WAClBrE,GAAa,GACbgE,GAAqB,GACrBE,GAAsB,GACtBjE,OAASE,IAGLmE,EAAiB,SAAOzG,GAAP,uBAAAmD,EAAAC,OAAA,iEAGnB,WADMyB,EAAiB7E,GACJ+D,sBAAnB,aAAI,EAA+B2C,OAAM,SAAAC,GAAC,MAAU,KAANA,cAAkB9B,EAAed,eAH5D,WAAAZ,EAAA,MAIcE,IAAMC,KAAN,UAC5BhH,EAD4B,qBACL0G,EADK,YAE/B6B,IANiB,gBAIL+B,EAJK,EAIX1H,MAIF2H,EAAiBpK,EAAYuG,IACpB8D,QAAQC,KAAKH,GAC5B5E,EJzCG,CACL7D,KAAM,YACNqF,QIuCoBqD,IAClBL,IAXmB,kDAanB/C,QAAQ1C,MAAM,KAAE2C,SAASxE,MACzBkD,EAAS,KAAEsB,SAASxE,KAAK6B,OAdN,0DA6BvB,OAAKtE,EAAYuG,GAOf,6BACE,yBAAKlF,MAAO,CAAEsH,QAAS,SACrB,4BAAK3I,EAAYuG,GAAIhG,MACrB,kBAACsI,EAAA,EAAD,CACEtI,KAAM+H,EAActI,EAAYuG,GAAIlD,QACpCyF,KAAK,WAGT,0CAAgB9I,EAAYuG,GAAInD,YAChC,2BAAIpD,EAAYuG,GAAIpD,YAAhB,eAAsCnD,EAAYuG,GAAIpD,aAAgB,IAC1E,2BAAInD,EAAYuG,GAAIrD,IAAhB,eAA8BlD,EAAYuG,GAAIrD,KAAQ,IAC1D,wCACClD,EAAYuG,GAAI8D,QAAQvJ,KAAI,SAAA4H,GAAK,OAAIQ,GAAaR,MACnD,kBAAC,EAAD,CACEtE,UAAWA,EACXrB,SAAUiH,EACV1F,MAAOA,EACPD,QAAS0F,IAEX,kBAAC/F,EAAA,EAAD,CAAQC,QAAS,kBAAM4F,EAAUnE,KAAjC,8BACA,kBAAC,EAAD,CACEtB,UAAWqF,EACX1G,SAAUiH,EACV1F,MAAOA,EACPD,QAAS0F,IAEX,kBAAC/F,EAAA,EAAD,CAAQC,QAAS,kBAAM4F,EAAUD,KAAjC,0BA1BF,IA0B2F,6BACzF,kBAAC,EAAD,CACExF,UAAWuF,EACX5G,SAAUiH,EACV1F,MAAOA,EACPD,QAAS0F,IAEX,kBAAC/F,EAAA,EAAD,CAAQC,QAAS,kBAAM4F,EAAUD,KAAjC,6CAnDqB,qBAAAlD,EAAAC,OAAA,2EAAAD,EAAA,MAEuBE,IAAM2D,IAAN,UACvC1K,EADuC,qBAChB0G,KAHP,gBAEPiE,EAFO,EAEb/H,KAGR8C,EJ/CG,CACL7D,KAAM,oBACNqF,QI6C2ByD,IALJ,gDAOrBxD,QAAQ1C,MAAR,MAPqB,wDAYvBmG,GAEE,6CC3FSC,GArDO,WAAO,IAAD,EACLtK,IAAZmF,EADiB,oBA8B1B,OA5BAC,IAAMmF,WAAU,WACd/D,IAAM2D,IAAN,UAAmB1K,EAAnB,WAEyB,qBAAA6G,EAAAC,OAAA,2EAAAD,EAAA,MAEsBE,IAAM2D,IAAN,UACtC1K,EADsC,eAFtB,gBAEP+K,EAFO,EAEbnI,KAGR8C,ELyDC,CACL7D,KAAM,mBACNqF,QK3D4B6D,IALH,gDAOrB5D,QAAQ1C,MAAR,MAPqB,wDAqBzBuG,GAXuB,qBAAAnE,EAAAC,OAAA,2EAAAD,EAAA,MAEmBE,IAAM2D,IAAN,UACjC1K,EADiC,gBAFnB,gBAELiL,EAFK,EAEXrI,KAGRuE,QAAQ+D,IAAID,GACZvF,EL0EC,CACL7D,KAAM,gBACNqF,QK5E0B+D,IANH,gDAQnB9D,QAAQ1C,MAAR,MARmB,wDAYvB0G,KACC,CAACzF,IAGF,yBAAK1E,UAAU,OACb,kBAAC,IAAD,KACE,kBAACiF,EAAA,EAAD,KACE,kBAACnB,EAAA,EAAD,CAAQ/D,GAAG,MAAX,aACA,kBAACoD,EAAA,EAAD,CAAQpD,GAAIqK,IAAMxE,GAAG,IAAIyE,SAAO,GAAhC,QAGA,kBAACC,EAAA,EAAD,CAASC,QAAM,IACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,gBACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YCnDdC,IAASC,OACP,mBZoByD,SAAC,GAGjC,IAFzBC,EAEwB,EAFxBA,QACAC,EACwB,EADxBA,SACwB,EACEC,qBAAWF,EAAS1L,GADtB,mBACjB6L,EADiB,KACVpG,EADU,KAExB,OACE,kBAACrF,EAAa0L,SAAd,CAAuB3K,MAAO,CAAC0K,EAAOpG,IACnCkG,KY3BL,CAAeD,QNkBM,SAACG,EAAcE,GACpC,OAAQA,EAAOnK,MACb,IAAK,mBACH,OAAO,eACFiK,EADL,CAEE5L,SAAS,eACJ8L,EAAO9E,QAAQ+E,QAChB,SAACC,EAAMzF,GAAP,sBAAyByF,EAAzB,eAAgCzF,EAAQC,GAAKD,MAC7C,IAHI,GAKHqF,EAAM5L,YAGf,IAAK,cACH,OAAO,eACF4L,EADL,CAEE5L,SAAS,eACJ4L,EAAM5L,SADH,eAEL8L,EAAO9E,QAAQR,GAAKsF,EAAO9E,YAGlC,IAAK,oBAQH,IAAK,YACH,OAAO,eACF4E,EADL,CAEE3L,YAAY,eACP2L,EAAM3L,YADA,eAER6L,EAAO9E,QAAQR,GAAKsF,EAAO9E,YAGpC,IAAK,gBACD,OAAO,eACF4E,EADL,CAEE1L,UAAU,eACL4L,EAAO9E,QAAQ+E,QAChB,SAACC,EAAMhK,GAAP,sBAA2BgK,EAA3B,eAAkChK,EAAUC,KAAOD,MACnD,IAHK,GAKJ4J,EAAM1L,aAGjB,QACE,OAAO0L,KMlET,kBAAC,GAAD,OAEFK,SAASC,eAAe,W","file":"static/js/main.f48b3cd0.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = \"male\",\n  Female = \"female\",\n  Other = \"other\"\n}\n\nexport type GenderIcon = 'mars' | 'venus' | 'genderless' | undefined;\n\nexport type HeartColor = 'green' | 'yellow' | 'orange' | 'red' | undefined;\n\nexport type NewEntry = \n    | Omit<HospitalEntry, 'id'> \n    | Omit<OccupationalHealthcareEntry, 'id'>  \n    | Omit<HealthCheckEntry, 'id'> ;\n\nexport type NewHospitalEntry = Omit<HospitalEntry, 'id'> ;\nexport type NewOcccupationalHealthcareEntry = Omit<OccupationalHealthcareEntry, 'id'> ;\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n}\n\nexport interface DetailedPatientInfo {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\n\nexport type Entry =\n  | HospitalEntry\n  | OccupationalHealthcareEntry\n  | HealthCheckEntry;\n\ninterface BaseEntry {\n    id: string;\n    description: string;\n    date: string;\n    specialist: string;\n    diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n    \"Healthy\" = 0,\n    \"LowRisk\" = 1,\n    \"HighRisk\" = 2,\n    \"CriticalRisk\" = 3\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n    type: \"HealthCheck\";\n    healthCheckRating: HealthCheckRating;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n    type: \"Hospital\";\n    discharge: Discharge;\n}\n\ninterface Discharge {\n    date: string;\n    criteria: string;\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n    type: \"OccupationalHealthcare\";\n    employerName: string;\n    sickLeave?: SickLeave;\n}\n\ninterface SickLeave {\n    startDate: string;\n    endDate: string;\n}\n","export const apiBaseUrl = 'http://localhost:3001/api';\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient, DetailedPatientInfo, Diagnosis } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  patientInfo: { [id: string]: DetailedPatientInfo };\n  diagnoses: { [id: string]: Diagnosis };\n};\n\nconst initialState: State = {\n  patients: {},\n  patientInfo: {},\n  diagnoses: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\nimport { Link } from 'react-router-dom';\n\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue } from \"../state\";\nimport { addPatient } from '../state/reducer';\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell><Link to={`/patient/${patient.id}`}>{patient.name}</Link></Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import { State } from \"./state\";\nimport { Patient, DetailedPatientInfo, Diagnosis, Entry } from \"../types\";\n\nexport type Action =\n  | {\n    type: \"SET_PATIENT_LIST\";\n    payload: Patient[];\n  }\n  | {\n    type: \"ADD_PATIENT\";\n    payload: Patient;\n  }\n  | {\n    type: \"ADD_DETAILED_INFO\";\n    payload: DetailedPatientInfo;\n  }\n  | {\n    type: \"ADD_DIAGNOSES\";\n    payload: Diagnosis[];\n  }\n  | {\n    type: \"ADD_ENTRY\";\n    payload: DetailedPatientInfo;\n  };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"ADD_DETAILED_INFO\":\n      return {\n        ...state,\n        patientInfo: {\n          ...state.patientInfo,\n          [action.payload.id]: action.payload\n        }\n      };\n      case \"ADD_ENTRY\":\n        return {\n          ...state,\n          patientInfo: {\n            ...state.patientInfo,\n            [action.payload.id]: action.payload\n          }\n        };\n    case \"ADD_DIAGNOSES\":\n        return {\n          ...state,\n          diagnoses: {\n            ...action.payload.reduce(\n              (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\n              {}\n            ),\n            ...state.diagnoses\n          }\n        };\n    default:\n      return state;\n  }\n};\n\n\nexport const setPatientList = (payload: Patient[]): Action => {\n  return {\n    type: \"SET_PATIENT_LIST\",\n    payload: payload\n  };\n};\n\nexport const addPatient = (payload: Patient): Action => {\n  return {\n    type: \"ADD_PATIENT\",\n    payload: payload\n  };\n};\n\nexport const addEntry = (payload: DetailedPatientInfo): Action => {\n  return {\n    type: \"ADD_ENTRY\",\n    payload: payload\n  };\n};\n\nexport const addDetailedInfo = (payload: DetailedPatientInfo): Action => {\n  return {\n    type: \"ADD_DETAILED_INFO\",\n    payload: payload\n  };\n};\n\nexport const setDiagnoses = (payload: Diagnosis[]): Action => {\n  return {\n    type: \"ADD_DIAGNOSES\",\n    payload: payload\n  };\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { TextField, DiagnosisSelection, NumberField } from \"../../AddPatientModal/FormField\";\nimport { HealthCheckRating, NewEntry } from '../../types';\nimport { useStateValue } from \"../../state\";\nimport { Modal, Segment } from 'semantic-ui-react';\n\ninterface Props {\n    onSubmit: (values: NewEntry) => void;\n    onCancel: () => void;\n}\n\n\nexport const AddHealthCheckEntry: React.FC<Props> = ({ onSubmit, onCancel }) => {\n    const [{ diagnoses },] = useStateValue();\n\n    return (\n        <Formik\n            initialValues={{\n                date: \"\",\n                description: \"\",\n                specialist: \"\",\n                diagnosisCodes: [\"\"],\n                healthCheckRating: HealthCheckRating.Healthy,\n                type: \"HealthCheck\"\n            }}\n            onSubmit={onSubmit}\n            validate={values => {\n                const requiredError = \"Field is required\";\n                const errors: { [field: string]: string } = {};\n                if (!values.date) {\n                    errors.date = requiredError;\n                }\n                if (!values.description) {\n                    errors.description = requiredError;\n                }\n                if (!values.specialist) {\n                    errors.specialist = requiredError;\n                }\n                if (!values.diagnosisCodes) {\n                    errors.diagnosisCodes = requiredError;\n                }\n                return errors;\n            }}\n        >\n            {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n                return (\n                    <Form className=\"form ui\">\n                        <Field\n                            label=\"Date\"\n                            placeholder=\"Date\"\n                            name=\"date\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Description\"\n                            placeholder=\"Description\"\n                            name=\"description\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Specialist\"\n                            placeholder=\"Specialist\"\n                            name=\"specialist\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"healthCheckRating\"\n                            name=\"healthCheckRating\"\n                            component={NumberField}\n                            min={0}\n                            max={3}\n                        />\n                        <DiagnosisSelection\n                        setFieldValue={setFieldValue}\n                        setFieldTouched={setFieldTouched}\n                        diagnoses={Object.values(diagnoses)}\n                        />    \n                        <Grid>\n                            <Grid.Column floated=\"left\" width={5}>\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                                    Cancel\n                  </Button>\n                            </Grid.Column>\n                            <Grid.Column floated=\"right\" width={5}>\n                                <Button\n                                    type=\"submit\"\n                                    floated=\"right\"\n                                    color=\"green\"\n                                    disabled={!dirty || !isValid}\n                                >\n                                    Add\n                  </Button>\n                            </Grid.Column>\n                        </Grid>\n                    </Form>\n                );\n            }}\n        </Formik>\n    );\n};\n\n\ninterface ModalProps {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: NewEntry) => void;\n  error?: string;\n}\n\nconst AddHealthCheckModal = ({ modalOpen, onClose, onSubmit, error }: ModalProps) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new health check entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddHealthCheckEntry onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddHealthCheckModal;","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { TextField, DiagnosisSelection } from \"../../AddPatientModal/FormField\";\nimport { NewHospitalEntry } from '../../types';\nimport { useStateValue } from \"../../state\";\nimport { Modal, Segment } from 'semantic-ui-react';\n\ninterface Props {\n    onSubmit: (values: NewHospitalEntry) => void;\n    onCancel: () => void;\n}\n\n\nexport const AddHospitalEntry: React.FC<Props> = ({ onSubmit, onCancel }) => {\n    const [{ diagnoses },] = useStateValue();\n\n    return (\n        <Formik\n            initialValues={{\n                date: \"\",\n                description: \"\",\n                specialist: \"\",\n                diagnosisCodes: [\"\"],\n                discharge: { date: \"\", criteria: \"\" },\n                type: \"Hospital\"\n            }}\n            onSubmit={onSubmit}\n            validate={values => {\n                const requiredError = \"Field is required\";\n                const errors: { [field: string]: string } = {};\n                if (!values.date) {\n                    errors.date = requiredError;\n                }\n                if (!values.description) {\n                    errors.description = requiredError;\n                }\n                if (!values.specialist) {\n                    errors.specialist = requiredError;\n                }\n                if (!values.diagnosisCodes) {\n                    errors.diagnosisCodes = requiredError;\n                }\n                if (!values.discharge.date || !values.discharge.criteria) {\n                    errors.discharge = requiredError;\n                }\n                return errors;\n            }}\n        >\n            {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n                return (\n                    <Form className=\"form ui\">\n                        <Field\n                            label=\"Date\"\n                            placeholder=\"Date\"\n                            name=\"date\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Description\"\n                            placeholder=\"Description\"\n                            name=\"description\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Specialist\"\n                            placeholder=\"Specialist\"\n                            name=\"specialist\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Discharge Date\"\n                            placeholder=\"Discharge Date\"\n                            name=\"discharge.date\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Discharge Criteria\"\n                            placeholder=\"Discharge Criteria\"\n                            name=\"discharge.criteria\"\n                            component={TextField}\n                        />\n                        <DiagnosisSelection\n                            setFieldValue={setFieldValue}\n                            setFieldTouched={setFieldTouched}\n                            diagnoses={Object.values(diagnoses)}\n                        />\n                        <Grid>\n                            <Grid.Column floated=\"left\" width={5}>\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                                    Cancel\n                                </Button>\n                            </Grid.Column>\n                            <Grid.Column floated=\"right\" width={5}>\n                                <Button\n                                    type=\"submit\"\n                                    floated=\"right\"\n                                    color=\"green\"\n                                    disabled={!dirty || !isValid}\n                                >\n                                    Add\n                                </Button>\n                            </Grid.Column>\n                        </Grid>\n                    </Form>\n                );\n            }}\n        </Formik>\n    );\n};\n\n\ninterface ModalProps {\n    modalOpen: boolean;\n    onClose: () => void;\n    onSubmit: (values: NewHospitalEntry) => void;\n    error?: string;\n}\n\nconst AddHospitalEntryModal = ({ modalOpen, onClose, onSubmit, error }: ModalProps) => (\n    <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n        <Modal.Header>Add a new hospital entry</Modal.Header>\n        <Modal.Content>\n            {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n            <AddHospitalEntry onSubmit={onSubmit} onCancel={onClose} />\n        </Modal.Content>\n    </Modal>\n);\n\nexport default AddHospitalEntryModal;","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { TextField, DiagnosisSelection } from \"../../AddPatientModal/FormField\";\nimport { NewOcccupationalHealthcareEntry } from '../../types';\nimport { useStateValue } from \"../../state\";\nimport { Modal, Segment } from 'semantic-ui-react';\n\ninterface Props {\n    onSubmit: (values: NewOcccupationalHealthcareEntry) => void;\n    onCancel: () => void;\n}\n\n\nexport const AddOccupationalHealthEntry: React.FC<Props> = ({ onSubmit, onCancel }) => {\n    const [{ diagnoses },] = useStateValue();\n\n    const submitForm = (entryData: NewOcccupationalHealthcareEntry): void => {\n        const newEntryValues = entryData;\n        if (newEntryValues.sickLeave?.startDate === '' &&  newEntryValues.sickLeave?.endDate === '') delete newEntryValues.sickLeave;\n        onSubmit(newEntryValues);\n    };\n\n    return (\n        <Formik\n            initialValues={{\n                date: \"\",\n                description: \"\",\n                specialist: \"\",\n                diagnosisCodes: [\"\"],\n                employerName: \"\",\n                sickLeave: { startDate: \"\", endDate: \"\" },\n                type: \"OccupationalHealthcare\"\n            }}\n            onSubmit={submitForm}\n            validate={values => {\n                const requiredError = \"Field is required\";\n                const errors: { [field: string]: string } = {};\n                if (!values.date) {\n                    errors.date = requiredError;\n                }\n                if (!values.description) {\n                    errors.description = requiredError;\n                }\n                if (!values.specialist) {\n                    errors.specialist = requiredError;\n                }\n                if (!values.diagnosisCodes) {\n                    errors.diagnosisCodes = requiredError;\n                }\n                if ((!values?.sickLeave?.startDate && values?.sickLeave?.endDate) || (values?.sickLeave?.startDate && !values?.sickLeave?.endDate)) {\n                    errors.sickLeave = requiredError;\n                }\n                return errors;\n            }}\n        >\n            {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n                return (\n                    <Form className=\"form ui\">\n                        <Field\n                            label=\"Date\"\n                            placeholder=\"Date\"\n                            name=\"date\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Description\"\n                            placeholder=\"Description\"\n                            name=\"description\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Specialist\"\n                            placeholder=\"Specialist\"\n                            name=\"specialist\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Employer Name\"\n                            placeholder=\"Employer Name\"\n                            name=\"employerName\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Sick Leave Start Date\"\n                            placeholder=\"Sick Leave Start Date\"\n                            name=\"sickLeave.startDate\"\n                            component={TextField}\n                        />\n                        <Field\n                            label=\"Sick Leave End Date\"\n                            placeholder=\"Sick Leave End Date\"\n                            name=\"sickLeave.endDate\"\n                            component={TextField}\n                        />\n                        <DiagnosisSelection\n                            setFieldValue={setFieldValue}\n                            setFieldTouched={setFieldTouched}\n                            diagnoses={Object.values(diagnoses)}\n                        />\n                        <Grid>\n                            <Grid.Column floated=\"left\" width={5}>\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                                    Cancel\n                                </Button>\n                            </Grid.Column>\n                            <Grid.Column floated=\"right\" width={5}>\n                                <Button\n                                    type=\"submit\"\n                                    floated=\"right\"\n                                    color=\"green\"\n                                    disabled={!dirty || !isValid}\n                                >\n                                    Add\n                                </Button>\n                            </Grid.Column>\n                        </Grid>\n                    </Form>\n                );\n            }}\n        </Formik>\n    );\n};\n\n\ninterface ModalProps {\n    modalOpen: boolean;\n    onClose: () => void;\n    onSubmit: (values: NewOcccupationalHealthcareEntry) => void;\n    error?: string;\n}\n\nconst AddOccupationalHealthEntryModal = ({ modalOpen, onClose, onSubmit, error }: ModalProps) => (\n    <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n        <Modal.Header>Add a new hospital entry</Modal.Header>\n        <Modal.Content>\n            {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n            <AddOccupationalHealthEntry onSubmit={onSubmit} onCancel={onClose} />\n        </Modal.Content>\n    </Modal>\n);\n\nexport default AddOccupationalHealthEntryModal;","import React from \"react\";\nimport axios from \"axios\";\nimport { useParams } from 'react-router-dom';\nimport { Icon, Segment, Button } from 'semantic-ui-react';\nimport { apiBaseUrl } from \"../constants\";\nimport {\n  DetailedPatientInfo, Entry, Gender, GenderIcon,\n  HealthCheckEntry, HospitalEntry, OccupationalHealthcareEntry, HeartColor, NewEntry\n} from '../types';\nimport AddHealthCheckModal from './EntryForms/AddHealthCheckEntry';\nimport AddHospitalEntryModal from './EntryForms/AddHospitalEntry';\nimport AddOccupationalHealthEntryModal from './EntryForms/AddOccupationalHealthEntry';\n\nimport { useStateValue } from \"../state\";\nimport { addDetailedInfo, addEntry } from '../state/reducer';\n\nconst getGenderIcon = (patientGender: Gender): GenderIcon => {\n  switch (patientGender) {\n    case 'male':\n      return 'mars';\n    case 'female':\n      return 'venus';\n    case 'other':\n      return 'genderless';\n    default:\n      return undefined;\n  }\n};\n\nconst getHeartColor = (rating: number): HeartColor => {\n  switch (rating) {\n    case 0:\n      return \"green\";\n    case 1:\n      return \"yellow\";\n    case 2:\n      return \"orange\";\n    case 3:\n      return \"red\";\n    default:\n      return undefined;\n  }\n};\n\nconst HospitalEntryTable: React.FC<{ entry: HospitalEntry }> = ({ entry }) => {\n  const [{ diagnoses },] = useStateValue();\n  return (\n    <Segment>\n      <div style={{ display: \"flex\" }}><h3 style={{ paddingRight: \"5px\" }}>{entry.date}</h3> <Icon name='doctor' size=\"large\" /></div>\n      Doctor: {entry.specialist} <br />\n      <i>{entry.description}</i> <br />\n      <i>{`Discharged: ${entry.discharge.date}, ${entry.discharge.criteria}`}</i> <br />\n      <ul>\n        {entry.diagnosisCodes?.map((code, index) => {\n          if (!diagnoses[code]) return <div>Loading...</div>;\n          return (\n            <li key={index}>{code} {diagnoses[code].name}</li>\n          );\n        })}\n      </ul>\n    </Segment>\n  );\n};\n\nconst HealthCheckTable: React.FC<{ entry: HealthCheckEntry }> = ({ entry }) => {\n  return (\n    <Segment>\n      <div style={{ display: \"flex\" }}><h3 style={{ paddingRight: \"5px\" }}>{entry.date}</h3> <Icon name='stethoscope' size=\"large\" /></div>\n      Doctor: {entry.specialist} <br />\n      <i>{entry.description}</i> <br />\n      <Icon name='heart' color={getHeartColor(entry.healthCheckRating)} />\n    </Segment>\n  );\n};\n\n\nconst OccupationalHealthcareTable: React.FC<{ entry: OccupationalHealthcareEntry }> = ({ entry }) => {\n  return (\n    <Segment>\n      <div style={{ display: \"flex\" }}><h3 style={{ paddingRight: \"5px\" }}>{entry.date}</h3> <Icon name='industry' size=\"large\" /></div>\n      Doctor: {entry.specialist} <br />\n      Employer: {entry.employerName} <br />\n      <i>{entry.description}</i> <br />\n      {entry.sickLeave ? `Sick leave: ${entry.sickLeave?.startDate}:${entry.sickLeave?.endDate}` : null}\n    </Segment>\n  );\n};\n\nconst assertNever = (value: never): never => {\n  throw new Error(\n    `Unhandled type: ${JSON.stringify(value)}`\n  );\n};\n\nconst EntryDetails = (entry: Entry) => {\n  switch (entry.type) {\n    case \"Hospital\":\n      return <HospitalEntryTable entry={entry} />;\n    case \"HealthCheck\":\n      return <HealthCheckTable entry={entry} />;\n    case \"OccupationalHealthcare\":\n      return <OccupationalHealthcareTable entry={entry} />;\n    default:\n      return assertNever(entry);\n  }\n};\n\nconst PatientInfo: React.FC = () => {\n  const [{ patientInfo }, dispatch] = useStateValue();\n  const { id } = useParams<{ id: string }>();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [modalHospitalEntry, setModalHospitalOpen] = React.useState<boolean>(false);\n  const [modalOccHealthEntry, setModalOccHealthOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (modalFunc: Function): void => modalFunc(true);\n\n  const closeModals = (): void => {\n    setModalOpen(false);\n    setModalHospitalOpen(false);\n    setModalOccHealthOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewEntry = async (values: NewEntry) => {\n    try {\n      const newEntryValues = values;\n      if (newEntryValues.diagnosisCodes?.every(x => x === '')) delete newEntryValues.diagnosisCodes;\n      const { data: newEntry } = await axios.post<Entry>(\n        `${apiBaseUrl}/patients/${id}/entries`,\n        newEntryValues\n      );\n      const updatedPatient = patientInfo[id];\n      updatedPatient.entries.push(newEntry);\n      dispatch(addEntry(updatedPatient));\n      closeModals();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  const fetchPatientInfo = async () => {\n    try {\n      const { data: detailedPatientInfo } = await axios.get<DetailedPatientInfo>(\n        `${apiBaseUrl}/patients/${id}`\n      );\n      dispatch(addDetailedInfo(detailedPatientInfo));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  if (!patientInfo[id]) {\n    fetchPatientInfo();\n    return (\n      <div>Loading...</div>\n    );\n  }\n  return (\n    <div>\n      <div style={{ display: 'flex' }}>\n        <h2>{patientInfo[id].name}</h2>\n        <Icon\n          name={getGenderIcon(patientInfo[id].gender)}\n          size='large'\n        />\n      </div>\n      <p>Occupation: {patientInfo[id].occupation}</p>\n      <p>{patientInfo[id].dateOfBirth ? `DoB: ${patientInfo[id].dateOfBirth}` : ''}</p>\n      <p>{patientInfo[id].ssn ? `SSN: ${patientInfo[id].ssn}` : ''}</p>\n      <h4>Entries:</h4>\n      {patientInfo[id].entries.map(entry => EntryDetails(entry))}\n      <AddHealthCheckModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewEntry}\n        error={error}\n        onClose={closeModals}\n      />\n      <Button onClick={() => openModal(setModalOpen)}>Add New Health Check Entry</Button>\n      <AddHospitalEntryModal\n        modalOpen={modalHospitalEntry}\n        onSubmit={submitNewEntry}\n        error={error}\n        onClose={closeModals}\n      />\n      <Button onClick={() => openModal(setModalOccHealthOpen)}>Add New Hospital Entry</Button> <br />\n      <AddOccupationalHealthEntryModal\n        modalOpen={modalOccHealthEntry}\n        onSubmit={submitNewEntry}\n        error={error}\n        onClose={closeModals}\n      />\n      <Button onClick={() => openModal(setModalOccHealthOpen)}>Add New Occupational Health Check Entry</Button>\n    </div>\n  );\n};\n\nexport default PatientInfo;","import React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\n\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue } from \"./state\";\nimport { Patient, Diagnosis } from \"./types\";\nimport { setPatientList, setDiagnoses } from './state/reducer';\n\nimport PatientListPage from \"./PatientListPage\";\nimport PatientInfo from './components/PatientInfo';\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    const fetchDiagnoses = async () => {\n      try {\n        const { data: diagnosesData } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnoses`\n        );\n        console.log(diagnosesData);\n        dispatch(setDiagnoses(diagnosesData));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n    fetchDiagnoses();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patient/:id\">\n              <PatientInfo /> \n            </Route> \n            <Route path=\"/\">\n              <PatientListPage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}